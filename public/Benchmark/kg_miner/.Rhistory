y
intersect(y, z)
dat <- rbind(5, NULL)
dat
unlist(dat[!sapply(dat, is.null)])
dat <- rbind(5, NULL, 7)
dat
unlist(dat[!sapply(dat, is.null)])
unlist(dat)
!sapply(dat, is.null)]
!sapply(dat, is.null)
dat
dat <- rbind("5",NULL , "7")
dat
!sapply(dat, is.null)
unlist(dat[!sapply(dat, is.null)])
unlist(dat)
dat <- list("5",NULL , "7")
dat
unlist(dat[!sapply(dat, is.null)])
unlist(dat
)
!sapply(dat, is.null)
as.data.frame(table(paths))(unlist(dat[!sapply(dat, is.null)]))
as.data.frame(table((unlist(dat[!sapply(dat, is.null)]))))
dat <- rbind("a\na\na\nhqs\nqsdq", "a\nss\nss\nss")
dat<-rbind.fill(apply(dat, 1, function(x) {
b<-unlist(str_split(x, "\n"))
b<-as.data.frame(table(b))
b<-b[order(-b$Freq),]
rtn <- as.data.frame(t(b$Freq))
colnames(rtn) <- b$b
rtn <- cbind(label = "T", rtn)
return (rtn)
}))
list.of.packages <- c("utils", "stringr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.rstudio.com/")
library(utils)
library(stringr)
dat <- rbind("a\na\na\nhqs\nqsdq", "a\nss\nss\nss")
dat<-rbind.fill(apply(dat, 1, function(x) {
b<-unlist(str_split(x, "\n"))
b<-as.data.frame(table(b))
b<-b[order(-b$Freq),]
rtn <- as.data.frame(t(b$Freq))
colnames(rtn) <- b$b
rtn <- cbind(label = "T", rtn)
return (rtn)
}))
list.of.packages <- c("utils", "plyr", "LiblineaR", "parallel", "RWeka")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.rstudio.com/")
library(methods)
library(utils)
library(plyr)
library(LiblineaR)
library(parallel)
library(RWeka)
dat <- rbind("a\na\na\nhqs\nqsdq", "a\nss\nss\nss")
dat<-rbind.fill(apply(dat, 1, function(x) {
b<-unlist(str_split(x, "\n"))
b<-as.data.frame(table(b))
b<-b[order(-b$Freq),]
rtn <- as.data.frame(t(b$Freq))
colnames(rtn) <- b$b
rtn <- cbind(label = "T", rtn)
return (rtn)
}))
dat
library(parallel)
no_cores <- detectCores() - 1
no_cores
no_cores <- detectCores()
no_cores
cl<-makeCluster(no_cores)
clusterExport(cl, "base")
base <- 4
# Run
parLapply(cl,
2:4,
function(exponent)
base^exponent)
# Finish
stopCluster(cl)
cl<-makeCluster(no_cores)
base <- 2
clusterExport(cl, "base")
parLapply(cl,
2:4,
function(exponent)
base^exponent)
parLapply(cl,
2:5,
function(exponent)
base^exponent)
parLapply(cl,
2:6,
function(exponent)
base^exponent)
parLapply(cl,
2:60,
function(exponent)
base^exponent)
stopCluster(cl)
gc()
if(length(new.packages)) install.packages(new.packages, repos="http://cran.rstudio.com/")
list.of.packages <- c("FSelector", "ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.rstudio.com/")
library(FSelector)
library(ggplot2)
# ---- Cleanup everything before start ----
options(warn=-1)
rm(list = ls())
gc()
list.of.packages <- c("FSelector", "ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.rstudio.com/")
library(FSelector)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
# ---- Load input data ----
INPUT_FILE = "./data_id/state_capital.csv"
dat_state_capital.true <- read.csv(INPUT_FILE)
if (ncol(dat_state_capital.true) < 3)
dat_state_capital.true$label <- T
# ---- Construct false labeled data -----
set.seed(233)
INPUT_FILE = "./data_id/state_largest_cities_id.csv"
largest_cities <- read.csv(INPUT_FILE)
# TODO: reformat this so it is universal and file independent
dat_state_capital.false <- rbind.fill(apply(dat_state_capital.true, 1, function(x){
candidates <- unique(largest_cities[which(largest_cities[,1] == x[1] & largest_cities[,2] != x[2]), 2])
return(data.frame(src=x[1],
dst=candidates,
label=F))
}))
# ---- Cleanup everything before start ----
options(warn=-1)
rm(list = ls())
gc()
list.of.packages <- c("FSelector", "ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.rstudio.com/")
library(FSelector)
library(ggplot2)
#---- GBSERVER API ----
source("./Rscript/experimentAPI.R")
# ---- INPUT and CONFIGURATIONS ----
EDGE_TYPE_FILE = "./data/infobox.edgetypes"
CLUSTER_SIZE = 1 # Number of workers in gbserver
FALSE_PER_TRUE = 5
DISCARD_REL = 191
ASSOCIATE_REL = c(404)
max_depth = 3
# ---- Load edge type file ----
mapfile <- read.csv(EDGE_TYPE_FILE, sep="\t", header=F)
mapfile$V1 <- as.numeric(mapfile$V1)
mapfile$V2 <- as.character(mapfile$V2)
# ---- Load input data ----
INPUT_FILE = "./data_id/state_capital.csv"
dat_state_capital.true <- read.csv(INPUT_FILE)
if (ncol(dat_state_capital.true) < 3)
dat_state_capital.true$label <- T
# ---- Construct false labeled data -----
set.seed(233)
INPUT_FILE = "./data_id/state_largest_cities_id.csv"
largest_cities <- read.csv(INPUT_FILE)
# TODO: reformat this so it is universal and file independent
dat_state_capital.false <- rbind.fill(apply(dat_state_capital.true, 1, function(x){
candidates <- unique(largest_cities[which(largest_cities[,1] == x[1] & largest_cities[,2] != x[2]), 2])
return(data.frame(src=x[1],
dst=candidates,
label=F))
}))
colnames(dat_state_capital.true) <- c("src","dst","label")
dat_state_capital_largestcity <- rbind(dat_state_capital.true, dat_state_capital.false)
tmp.paths <- read.csv("./Predicate_paths/capitals_3.csv")
res_capital_state_largestcity <- list()
res_capital_state_largestcity[["raw"]] <- tmp.paths
res_capital_state_largestcity[["model"]] <- Logistic(label~.,res_capital_state_largestcity[["raw"]])
res_capital_state_largestcity[["eval"]] <- evaluate_Weka_classifier(res_capital_state_largestcity[["model"]], numFolds = 10, complexity = T, class = T, seed = 233)
res_capital_state_largestcity[["eval"]]
tmp.paths <- read.csv("./Predicate_paths/capitals_3.csv")
tmp.paths$X <- NULL
dkm <- read.csv("./Predicate_paths/capitals_3.csv", header = F)
dkm$V1 <- NULL
colnames(tmp.paths) <- as.character(unlist(dkm[1,]))
res_capital_state_largestcity <- list()
res_capital_state_largestcity[["raw"]] <- tmp.paths
res_capital_state_largestcity[["model"]] <- Logistic(label~.,res_capital_state_largestcity[["raw"]])
res_capital_state_largestcity[["eval"]] <- evaluate_Weka_classifier(res_capital_state_largestcity[["model"]], numFolds = 10, complexity = T, class = T, seed = 233)
res_capital_state_largestcity[["eval"]]
# ---- Feature selection validation ----
weights_capital_state_largestcity <- information.gain(label~., res_capital_state_largestcity[["raw"]])
weights_capital_state_largestcity <- weights_capital_state_largestcity[order(weights_capital_state_largestcity[,1], decreasing = T),,drop=F]
# ---- Top related relations ----
features_captial_state_largestcity <- data.frame(importance=weights_capital_state_largestcity$attr_importance, path=row.names(weights_capital_state_largestcity))
features_captial_state_largestcity <- features_captial_state_largestcity[order(-features_captial_state_largestcity$importance),]
features_captial_state_largestcity$path <- idpath2title(features_captial_state_largestcity$path, mapfile)
weights_capital_state_largestcity
head(weights_capital_state)
# ---- Feature selection validation ----
weights_capital_state_largestcity <- information.gain(label~., res_capital_state_largestcity[["raw"]])
weights_capital_state_largestcity <- weights_capital_state_largestcity[order(weights_capital_state_largestcity[,1], decreasing = T),,drop=F]
# ---- Top related relations ----
features_captial_state_largestcity <- data.frame(importance=weights_capital_state_largestcity$attr_importance, path=row.names(weights_capital_state_largestcity))
features_captial_state_largestcity <- features_captial_state_largestcity[order(-features_captial_state_largestcity$importance),]
features_captial_state_largestcity$path <- idpath2title(features_captial_state_largestcity$path, mapfile)
weights_capital_state_largestcity
head(weights_capital_state_largestcity)
features_captial_state_largestcity
head(features_captial_state_largestcity)
library(FSelector)
library(RWeka)
library(FSelector)
library(FSelector)
library(RWeka)
# ---- AOROC of predicated sub paths ----
fm_val <- function(resdf) {
return(as.numeric(str_split(str_split(resdf$eval$string,"\n")[[1]][24], " +")[[1]][9]))
}
full_predicated_path <- res_capital_state_largestcity[["raw"]]
cl <- makeCluster(1)
clusterExport(cl = 2, varlist=c("full_predicated_path", "weights_capital_state", "eval.df", "cutoff.k", "fm_val","str_split",
"as.numeric"), envir = environment())
# ---- AOROC of predicated sub paths ----
fm_val <- function(resdf) {
return(as.numeric(str_split(str_split(resdf$eval$string,"\n")[[1]][24], " +")[[1]][9]))
}
full_predicated_path <- res_capital_state_largestcity[["raw"]]
cl <- makeCluster(2)
clusterExport(cl = cl, varlist=c("full_predicated_path", "weights_capital_state", "eval.df", "cutoff.k", "fm_val","str_split",
"as.numeric"), envir = environment())
# ---- AOROC of predicated sub paths ----
fm_val <- function(resdf) {
return(as.numeric(str_split(str_split(resdf$eval$string,"\n")[[1]][24], " +")[[1]][9]))
}
full_predicated_path <- res_capital_state_largestcity[["raw"]]
cl <- makeCluster(2)
clusterExport(cl = cl, varlist=c("full_predicated_path", "weights_capital_state_largestcity", "eval.df", "cutoff.k", "fm_val","str_split",
"as.numeric"), envir = environment())
res_AOROC_largestcity <- rbind.fill(parLapply(cl, seq(1,ncol(full_predicated_path)-1,by = 1), function(x){
wekares<-eval.df(full_predicated_path[,c("label", cutoff.k(weights_capital_state_largestcity, x))])
return(data.frame(AOROC=fm_val(wekares),nfeature=x))
}))
# ---- AOROC of predicated sub paths ----
fm_val <- function(resdf) {
return(as.numeric(str_split(str_split(resdf$eval$string,"\n")[[1]][24], " +")[[1]][9]))
}
full_predicated_path <- res_capital_state_largestcity[["raw"]]
cl <- makeCluster(2)
clusterExport(cl = cl, varlist=c("full_predicated_path", "weights_capital_state_largestcity", "eval.df", "cutoff.k", "fm_val","str_split",
"as.numeric"), envir = environment())
library(FSelector)
library(RWeka)
res_AOROC_largestcity <- rbind.fill(parLapply(cl, seq(1,ncol(full_predicated_path)-1,by = 1), function(x){
wekares<-eval.df(full_predicated_path[,c("label", cutoff.k(weights_capital_state_largestcity, x))])
return(data.frame(AOROC=fm_val(wekares),nfeature=x))
}))
res_capital_state_largestcity <- list()
res_capital_state_largestcity[["raw"]] <- tmp.paths
res_capital_state_largestcity[["model"]] <- Logistic(label~.,res_capital_state_largestcity[["raw"]])
res_capital_state_largestcity[["eval"]] <- evaluate_Weka_classifier(res_capital_state_largestcity[["model"]], numFolds = 10, complexity = T, class = T, seed = 233)
res_capital_state_largestcity[["eval"]]
# ---- AOROC of predicated sub paths ----
fm_val <- function(resdf) {
return(as.numeric(str_split(str_split(resdf$eval$string,"\n")[[1]][24], " +")[[1]][9]))
}
full_predicated_path <- res_capital_state_largestcity[["raw"]]
cl <- makeCluster(2)
clusterExport(cl = cl, varlist=c("full_predicated_path", "weights_capital_state_largestcity", "eval.df", "cutoff.k", "fm_val","str_split",
"as.numeric"), envir = environment())
source("./Rscript/experimentAPI.R")
res_AOROC_largestcity <- rbind.fill(parLapply(cl, seq(1,ncol(full_predicated_path)-1,by = 1), function(x){
wekares<-eval.df(full_predicated_path[,c("label", cutoff.k(weights_capital_state_largestcity, x))])
return(data.frame(AOROC=fm_val(wekares),nfeature=x))
}))
# ---- AOROC of predicated sub paths ----
fm_val <- function(resdf) {
return(as.numeric(str_split(str_split(resdf$eval$string,"\n")[[1]][24], " +")[[1]][9]))
}
full_predicated_path <- res_capital_state_largestcity[["raw"]]
cl <- makeCluster(2)
clusterExport(cl = cl, varlist=c("full_predicated_path", "weights_capital_state_largestcity", "eval.df", "cutoff.k", "fm_val","str_split","as.numeric"), envir = environment())
res_AOROC_largestcity <- rbind.fill(parLapply(cl, seq(1,ncol(full_predicated_path)-1,by = 1), function(x){
wekares<-eval.df(full_predicated_path[,c("label", cutoff.k(weights_capital_state_largestcity, x))])
return(data.frame(AOROC=fm_val(wekares),nfeature=x))
}))
res_capital_state_largestcity[["raw"]]
stopCluster(cl)
# ---- AOROC of predicated sub paths ----
fm_val <- function(resdf) {
return(as.numeric(str_split(str_split(resdf$eval$string,"\n")[[1]][24], " +")[[1]][9]))
}
full_predicated_path <-
cl <- makeCluster(2)
clusterExport(cl = cl, varlist=c("full_predicated_path", "weights_capital_state_largestcity", "eval.df", "cutoff.k", "fm_val","str_split","as.numeric"), envir = environment())
res_AOROC_largestcity <- rbind.fill(parLapply(cl, seq(1,ncol(full_predicated_path)-1,by = 1), function(x){
wekares<-eval.df(full_predicated_path[,c("label", cutoff.k(weights_capital_state_largestcity, x))])
return(data.frame(AOROC=fm_val(wekares),nfeature=x))
}))
stopCluster(cl)
# ---- AOROC of predicated sub paths ----
fm_val <- function(resdf) {
return(as.numeric(str_split(str_split(resdf$eval$string,"\n")[[1]][24], " +")[[1]][9]))
}
full_predicated_path <- res_capital_state_largestcity[["raw"]]
cl <- makeCluster(2)
clusterExport(cl = cl, varlist=c("full_predicated_path", "weights_capital_state_largestcity", "eval.df", "cutoff.k", "fm_val","str_split","as.numeric"), envir = environment())
res_AOROC_largestcity <- rbind.fill(parLapply(cl, seq(1,ncol(full_predicated_path)-1,by = 1), function(x){
wekares<-eval.df(full_predicated_path[,c("label", cutoff.k(weights_capital_state_largestcity, x))])
return(data.frame(AOROC=fm_val(wekares),nfeature=x))
}))
stopCluster(cl)
# ---- AOROC of predicated sub paths ----
fm_val <- function(resdf) {
return(as.numeric(str_split(str_split(resdf$eval$string,"\n")[[1]][24], " +")[[1]][9]))
}
full_predicated_path <- res_capital_state_largestcity[["raw"]]
cl <- makeCluster(2)
clusterExport(cl = cl, varlist=c("full_predicated_path", "weights_capital_state_largestcity", "eval.df", "cutoff.k", "fm_val","str_split","as.numeric"), envir = environment())
res_AOROC_largestcity <- rbind.fill(parLapply(cl, seq(1,ncol(full_predicated_path)-1,by = 1), function(x){
wekares<-eval.df(full_predicated_path[,c("label", cutoff.k(weights_capital_state_largestcity, x))])
return(data.frame(AOROC=fm_val(wekares),nfeature=x))
}))
stopCluster(cl)
# ---- AOROC of predicated sub paths ----
fm_val <- function(resdf) {
return(as.numeric(str_split(str_split(resdf$eval$string,"\n")[[1]][24], " +")[[1]][9]))
}
full_predicated_path <- res_capital_state_largestcity[["raw"]]
cl <- makeCluster(1)
clusterExport(cl = cl, varlist=c("full_predicated_path", "weights_capital_state_largestcity", "eval.df", "cutoff.k", "fm_val","str_split","as.numeric"), envir = environment())
res_AOROC_largestcity <- rbind.fill(parLapply(cl, seq(1,ncol(full_predicated_path)-1,by = 1), function(x){
library(FSelector)
library(RWeka)
wekares<-eval.df(full_predicated_path[,c("label", cutoff.k(weights_capital_state_largestcity, x))])
return(data.frame(AOROC=fm_val(wekares),nfeature=x))
}))
# ---- AOROC of predicated sub paths ----
fm_val <- function(resdf) {
return(as.numeric(str_split(str_split(resdf$eval$string,"\n")[[1]][24], " +")[[1]][9]))
}
full_predicated_path <- res_capital_state_largestcity[["raw"]]
cl <- makeCluster(1)
clusterExport(cl = cl, varlist=c("full_predicated_path", "weights_capital_state_largestcity", "eval.df", "cutoff.k", "fm_val","str_split","as.numeric"), envir = environment())
res_AOROC_largestcity <- rbind.fill(parLapply(cl, seq(1,ncol(full_predicated_path)-1,by = 5), function(x){
library(FSelector)
library(RWeka)
wekares<-eval.df(full_predicated_path[,c("label", cutoff.k(weights_capital_state_largestcity, x))])
return(data.frame(AOROC=fm_val(wekares),nfeature=x))
}))
stopCluster(cl)
# ---- AOROC of predicated sub paths ----
fm_val <- function(resdf) {
return(as.numeric(str_split(str_split(resdf$eval$string,"\n")[[1]][24], " +")[[1]][9]))
}
full_predicated_path <- res_capital_state_largestcity[["raw"]]
cl <- makeCluster(1)
clusterExport(cl = cl, varlist=c("full_predicated_path", "weights_capital_state_largestcity", "eval.df", "cutoff.k", "fm_val","str_split","as.numeric"), envir = environment())
res_AOROC_largestcity <- rbind.fill(parLapply(cl, seq(1,ncol(full_predicated_path)-1,by = 5), function(x){
library(FSelector)
library(RWeka)
wekares<-eval.df(full_predicated_path[,c("label", cutoff.k(weights_capital_state_largestcity, x))])
return(data.frame(AOROC=fm_val(wekares),nfeature=x))
}))
stopCluster(cl)
# ---- AOROC of predicated sub paths ----
fm_val <- function(resdf) {
return(as.numeric(str_split(str_split(resdf$eval$string,"\n")[[1]][24], " +")[[1]][9]))
}
full_predicated_path <- res_capital_state_largestcity[["raw"]]
cl <- makeCluster(2)
clusterExport(cl = cl, varlist=c("full_predicated_path", "weights_capital_state_largestcity", "eval.df", "cutoff.k", "fm_val","str_split","as.numeric"), envir = environment())
res_AOROC_largestcity <- rbind.fill(parLapply(cl, seq(1,ncol(full_predicated_path)-1,by = 5), function(x){
library(FSelector)
library(RWeka)
wekares<-eval.df(full_predicated_path[,c("label", cutoff.k(weights_capital_state_largestcity, x))])
return(data.frame(AOROC=fm_val(wekares),nfeature=x))
}))
# ---- Load input data ----
INPUT_FILE = "./data_id/city_capital.csv"
dat_city_capital <- read.csv(INPUT_FILE)
View(dat_city_capital)
View(dat_city_capital)
.jcall
setwd("~/Documents/Project/Benchmark_Fact_Checking/kg_miner/Predicate_Script")
setwd("~/Documents/Project/Benchmark_Fact_Checking/kg_miner")
# ---- Load input data ----
INPUT_FILE = "../data/testing_scenario/capitalOf_1/capitalOf_1.tsv" # Example : "../facts/lobbyist/firm_payee.csv" col 1 and 2 are ids and 3 is label
dat_city_capital <- read.csv(INPUT_FILE)
dat_city_capital
INPUT_FILE = "../data/testing_scenario/capitalOf_1/capitalOf_1.tsv" # Example : "../facts/lobbyist/firm_payee.csv" col 1 and 2 are ids and 3 is label
dat_city_capital <- read.csv(INPUT_FILE, sep="\t", header=F)
dat_city_capital
dat_city_capital <- read.table(INPUT_FILE, sep="\t", header=F)
dat_city_capital
dat_city_capital[0]
dat_city_capital[1]
dat_city_capital[1][0]
dat_city_capital[1][1]
dat_city_capital[1,1]
dat_city_capital <- read.csv("company_president.csv")
dat_city_capital
dat_city_capital <- read.table(INPUT_FILE, sep="\t", header=F)
dat_city_capital
length((dat_city_capital))
length(dat_city_capital)
dat_city_capital[0,]
dat_city_capital[1,]
dat_city_capital[1,1]
dat_city_capital[1,5]
dat_city_capital[1,3]
dat_city_capital[1,2]
dat_city_capital[1,1]
dat_city_capital[1,0]
dat_city_capital[10,1]
dat_city_capital[10,]
dat_city_capital[,1]
dat_city_capital[1,1]
dat_city_capital[10,1]
dat_city_capital[0,1]
dat_city_capital[0,0]
dat_city_capital[0,2]
nrow((dat_city_capital))
nrow(dat_city_capital)
nrcol(dat_city_capital)
ncol(dat_city_capital)
as.numeric('4')
as.numeric('e')
da$V1
dat_city_capital$V1
as.character(('ezre'))
dat_city_capital
dat_city_capital['Wyoming',]
dat_city_capital['Wyoming']
dat_city_capital["Wyoming"]
dat_city_capital[dat_city_capital$V1=="Wyoming"]
dat_city_capital$V1=="Wyoming"
dat_city_capital[dat_city_capital$V1 =="Wyoming"]
dat_city_capital[dat_city_capital$V1 =="Wyoming",]
RELATION_TO_RUN = "../data/testing_scenario/capitalOf_1/relation_to_run.tsv"
relfile <- read.table(RELATION_TO_RUN, sep="\t", header=F)
relfile
EDGE_TYPE_FILE = "../data/kb_graphs/dbpedia/edge_dict.tsv" # Example : "../data/lobbyist.edgetypes"
edgefile <- read.table(EDGE_TYPE_FILE, sep="\t", header=F)
edgefile$V1 <- as.numeric(edgefile$V1)
edgefile$V2 <- as.character(edgefile$V2)
edgefile
relfile
edgefile[edgefile==relfile]
edgefile[,edgefile==relfile]
relfile[0]
relfile[1]
edgefile[,edgefile==relfile[1]]
edgefile[,edgefile$V2==relfile[1]]
edgefile[edgefile$V2==relfile[1]]
edgefile$V1[edgefile$V2==relfile[1]]
edgefile$V2==relfile[1]
edgefile$V2=
s
edgefile$V2
edgefile$V2==as.character(relfile[1])
edgefile$V1[edgefile$V2==as.character(relfile[1])]
as.numeric(edgefile$V1[edgefile$V2==as.character(relfile[1])])
edgefile$V2==as.character(relfile[1])
as.character(relfile[1])
as.character(relfile[0])
# ---- Load relation to run ----
relfile <- read.table(RELATION_TO_RUN, header=F)
relfile
relfile[0]
relfile[1]
as.character(relfile[1])
# ---- Load relation to run ----
relfile <- read.table(RELATION_TO_RUN, header=F)
relfile$V1 <- as.character(relfile$V1)
relfile[1]
edgefile$V2==as.character(relfile[1])
edgefile$V1[edgefile$V2==relfile[1]]
relfile[1]
edgefile$V1[5]
edgefile
edgefile$V1[which(edgefile$V2==relfile[1])]
edgefile[which(edgefile$V2==relfile[1])]
edgefile[which(edgefile$V2==relfile$V1[1])]
relfile$V1
relfile$V1[1]
relfile$V1[2]
which(edgefile$V2==relfile[1])
edgefile$V2==relfile[1]
relfile
edgefile$V2==relfile$V1[1]
which(edgefile$V2==relfile$V1[1])
edgefile$V2[which(edgefile$V2==relfile[1])]
edgefile$V2[38]
edgefile$V1[which(edgefile$V2==relfile[1])]
edgefile$V1[which(edgefile$V2==relfile$V1[1])]
DISCARD_REL <- edgefile$V1[which(edgefile$V2==relfile$V1[1])]
DISCARD_REL
cbind('za','qsd')
cbind('za','qsd','qqdsqd')
as.logical((1))
as.logical((-1))
as.logical((0))
print "qdq"
printf "qdq"
print("sd")
